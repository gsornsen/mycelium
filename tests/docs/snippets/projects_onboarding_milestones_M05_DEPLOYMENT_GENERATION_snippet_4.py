# Source: projects/onboarding/milestones/M05_DEPLOYMENT_GENERATION.md
# Line: 692
# Valid syntax: True
# Has imports: True
# Has assignments: True

# mycelium_onboarding/generators/secrets.py
"""Secrets generation and management."""

import secrets
import string
from pathlib import Path
from typing import Optional
import os

def generate_password(length: int = 32, include_symbols: bool = True) -> str:
    """
    Generate cryptographically secure password.

    Args:
        length: Password length
        include_symbols: Include special characters

    Returns:
        Generated password
    """
    alphabet = string.ascii_letters + string.digits
    if include_symbols:
        alphabet += "!@#$%^&*()_+-=[]{}|;:,.<>?"

    password = ''.join(secrets.choice(alphabet) for _ in range(length))
    return password

def generate_env_file(
    config: 'MyceliumConfig',
    output_path: Path,
    overwrite: bool = False
) -> Path:
    """
    Generate .env file with secrets.

    Args:
        config: Mycelium configuration
        output_path: Where to write .env file
        overwrite: If True, overwrite existing file

    Returns:
        Path to generated .env file

    Raises:
        FileExistsError: If file exists and overwrite=False
    """
    if output_path.exists() and not overwrite:
        raise FileExistsError(
            f"{output_path} already exists. Use overwrite=True to replace."
        )

    lines = [
        "# Mycelium Environment Configuration",
        "# Generated by: /mycelium-generate",
        "# IMPORTANT: Keep this file secure and never commit to version control",
        "",
    ]

    if config.services.postgres.enabled:
        lines.extend([
            "# PostgreSQL Configuration",
            f"POSTGRES_USER=mycelium",
            f"POSTGRES_PASSWORD={generate_password(32, include_symbols=False)}",
            f"POSTGRES_DB=mycelium",
            "",
        ])

    if config.services.redis.enabled and config.services.redis.password_protected:
        lines.extend([
            "# Redis Configuration",
            f"REDIS_PASSWORD={generate_password(32, include_symbols=False)}",
            "",
        ])

    lines.extend([
        "# Project Configuration",
        f"PROJECT_NAME={config.project_name}",
        f"MYCELIUM_ENV=development",
        "",
    ])

    output_path.parent.mkdir(parents=True, exist_ok=True)
    output_path.write_text("\n".join(lines))

    # Set restrictive permissions
    output_path.chmod(0o600)

    return output_path

def load_env_file(env_path: Path) -> dict[str, str]:
    """
    Load environment variables from .env file.

    Args:
        env_path: Path to .env file

    Returns:
        Dictionary of environment variables
    """
    env_vars = {}

    if not env_path.exists():
        return env_vars

    for line in env_path.read_text().splitlines():
        line = line.strip()

        # Skip comments and empty lines
        if not line or line.startswith('#'):
            continue

        # Parse KEY=VALUE
        if '=' in line:
            key, value = line.split('=', 1)
            env_vars[key.strip()] = value.strip()

    return env_vars

def update_env_var(env_path: Path, key: str, value: str) -> None:
    """
    Update or add environment variable in .env file.

    Args:
        env_path: Path to .env file
        key: Environment variable name
        value: Environment variable value
    """
    env_vars = load_env_file(env_path)
    env_vars[key] = value

    lines = [f"{k}={v}" for k, v in env_vars.items()]
    env_path.write_text("\n".join(lines) + "\n")