# Source: projects/onboarding/milestones/M05_DEPLOYMENT_GENERATION.md
# Line: 506
# Valid syntax: True
# Has imports: True
# Has assignments: True

# mycelium_onboarding/generators/justfile.py
"""Justfile generator for bare-metal deployments."""

from pathlib import Path

import jinja2

from mycelium_onboarding.config.schema import MyceliumConfig


class JustfileGenerator:
    """Generates Justfile configuration from MyceliumConfig."""

    TEMPLATE_NAME = "Justfile.j2"

    def __init__(self, template_dir: Path | None = None):
        if template_dir is None:
            template_dir = Path(__file__).parent.parent / "templates"

        self.env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(str(template_dir)),
            autoescape=False,
            trim_blocks=True,
            lstrip_blocks=True,
        )

    def generate(self, config: MyceliumConfig) -> str:
        """
        Generate Justfile from configuration.

        Args:
            config: Mycelium configuration

        Returns:
            Justfile content as string
        """
        template = self.env.get_template(self.TEMPLATE_NAME)

        context = {
            'config': config,
        }

        rendered = template.render(**context)
        return rendered

    def generate_to_file(
        self,
        config: MyceliumConfig,
        output_path: Path,
        overwrite: bool = False
    ) -> Path:
        """
        Generate Justfile to disk.

        Args:
            config: Mycelium configuration
            output_path: Where to write Justfile
            overwrite: If True, overwrite existing file

        Returns:
            Path to generated file

        Raises:
            FileExistsError: If file exists and overwrite=False
        """
        if output_path.exists() and not overwrite:
            raise FileExistsError(
                f"{output_path} already exists. Use overwrite=True to replace."
            )

        content = self.generate(config)

        output_path.parent.mkdir(parents=True, exist_ok=True)
        output_path.write_text(content)

        # Make executable
        output_path.chmod(0o755)

        return output_path

    def generate_service_scripts(self, config: MyceliumConfig, output_dir: Path) -> list[Path]:
        """
        Generate individual service management scripts.

        For bare-metal deployments, create helper scripts for each service.

        Args:
            config: Mycelium configuration
            output_dir: Directory for scripts

        Returns:
            List of generated script paths
        """
        scripts = []
        output_dir.mkdir(parents=True, exist_ok=True)

        if config.services.redis.enabled:
            redis_script = output_dir / "start-redis.sh"
            redis_script.write_text(self._generate_redis_script(config))
            redis_script.chmod(0o755)
            scripts.append(redis_script)

        if config.services.postgres.enabled:
            postgres_script = output_dir / "start-postgres.sh"
            postgres_script.write_text(self._generate_postgres_script(config))
            postgres_script.chmod(0o755)
            scripts.append(postgres_script)

        return scripts

    def _generate_redis_script(self, config: MyceliumConfig) -> str:
        """Generate standalone Redis startup script."""
        return f"""#!/usr/bin/env bash
# Redis startup script for Mycelium
# Generated by: /mycelium-onboarding

set -euo pipefail

REDIS_PORT={config.services.redis.port}
REDIS_CONF="${{XDG_CONFIG_HOME:-$HOME/.config}}/mycelium/redis.conf"
REDIS_LOG="${{XDG_DATA_HOME:-$HOME/.local/share}}/mycelium/logs/redis.log"

mkdir -p "$(dirname "$REDIS_LOG")"

redis-server \\
    --port "$REDIS_PORT" \\
    {"--appendonly yes \\" if config.services.redis.persistence else ""}\\
    --maxmemory {config.services.redis.max_memory} \\
    --logfile "$REDIS_LOG" \\
    --daemonize yes

sleep 2

if redis-cli -p "$REDIS_PORT" ping > /dev/null 2>&1; then
    echo "✓ Redis started successfully on port $REDIS_PORT"
else
    echo "✗ Redis failed to start. Check logs: $REDIS_LOG"
    exit 1
fi
"""

    def _generate_postgres_script(self, config: MyceliumConfig) -> str:
        """Generate standalone PostgreSQL startup script."""
        return f"""#!/usr/bin/env bash
# PostgreSQL startup script for Mycelium
# Generated by: /mycelium-onboarding

set -euo pipefail

POSTGRES_PORT={config.services.postgres.port}
PGDATA="${{XDG_DATA_HOME:-$HOME/.local/share}}/mycelium/postgres"

if [ ! -d "$PGDATA" ]; then
    echo "Initializing PostgreSQL data directory..."
    initdb -D "$PGDATA"
fi

pg_ctl -D "$PGDATA" -l "${{PGDATA}}/logfile" start

sleep 3

if pg_isready -p "$POSTGRES_PORT" > /dev/null 2>&1; then
    echo "✓ PostgreSQL started successfully on port $POSTGRES_PORT"
else
    echo "✗ PostgreSQL failed to start. Check logs: ${{PGDATA}}/logfile"
    exit 1
fi
"""
