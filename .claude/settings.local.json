{
  "permissions": {
    "allow": [
      "Read(//home/gerald/.claude/plugins/**)",
      "Bash(cat:*)",
      "Bash(readlink:*)",
      "Bash(test:*)",
      "Read(//home/gerald/.claude/**)",
      "mcp__taskqueue__list_projects",
      "mcp__RedisMCPServer__hgetall",
      "mcp__RedisMCPServer__info",
      "mcp__RedisMCPServer__scan_keys",
      "mcp__RedisMCPServer__hset",
      "Bash(uv run pytest:*)",
      "Bash(uv sync:*)",
      "Bash(uv run mypy:*)",
      "Bash(uv run ruff:*)",
      "Bash(uv run ruff format:*)",
      "Bash(uv run coverage report:*)",
      "Bash(uv pip:*)",
      "Bash(uv run:*)",
      "mcp__RedisMCPServer__scan_all_keys",
      "Bash(for f in /home/gerald/git/mycelium/plugins/mycelium-core/agents/*.md)",
      "Bash(done)",
      "Read(//home/gerald/.config/**)",
      "Bash(find /home/gerald/git/mycelium/docs/projects/backlog -name \"*.md\" -exec basename {} ;)",
      "Bash(find plugins/mycelium-core/agents -name \"*.md\" -exec wc -c {} +)",
      "Bash(awk '{sum+=$1; count++; if($1 > max) max=$1; if(min==\"\"\"\"\"\"\"\" || $1 < min) min=$1} END {print \"\"\"\"Total bytes:\"\"\"\", sum, \"\"\"\"\\nAgent count:\"\"\"\", count-1, \"\"\"\"\\nAverage bytes:\"\"\"\", int(sum/(count-1)), \"\"\"\"\\nMin bytes:\"\"\"\", min, \"\"\"\"\\nMax bytes:\"\"\"\", max}')",
      "Bash(wc -c /home/gerald/git/mycelium/plugins/mycelium-core/agents/09-meta-workflow-orchestrator.md)",
      "Bash(wc -c /home/gerald/git/mycelium/plugins/mycelium-core/agents/index.json)",
      "WebFetch(domain:www.anthropic.com)",
      "WebFetch(domain:github.com)",
      "Bash(find /home/gerald/git/mycelium -type f -name \"*.md\" -exec grep -l \"Claude Code Skills\" {})",
      "Bash(if [ -f \"docs/projects/claude-code-skills/milestones/M02_SKILL_INFRASTRUCTURE.md\" ])",
      "Bash(then echo \"M02 exists\")",
      "Bash(else echo \"M02 missing - will recreate\")",
      "Bash(fi)",
      "Bash(du:*)",
      "Bash(find:*)",
      "Bash(git worktree:*)",
      "Bash(mkdir:*)",
      "Bash(pytest:*)",
      "Bash(ruff check:*)",
      "Bash(ruff format:*)",
      "Bash(python:*)",
      "Bash(gh run view:*)",
      "Bash(gh run list:*)",
      "Read(//tmp/**)",
      "Bash(gh pr checks:*)",
      "Bash(jq:*)",
      "Bash(git config:*)",
      "Bash(gh pr view:*)",
      "Bash(uv --version:*)"
    ],
    "deny": [],
    "ask": []
  }
}
