name: Documentation Testing

on:
  push:
    branches:
      - main
      - develop
      - "feat/**"
    paths:
      - "docs/**/*.md"
      - "scripts/extract_doc_snippets.py"
      - "tests/docs/**"
      - ".github/workflows/docs.yml"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "docs/**/*.md"
      - "scripts/extract_doc_snippets.py"
      - "tests/docs/**"
      - ".github/workflows/docs.yml"
  workflow_dispatch:

jobs:
  test-documentation:
    name: Test Documentation Code Snippets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[test,dev]"

      - name: Extract code snippets from documentation
        run: |
          source .venv/bin/activate
          python scripts/extract_doc_snippets.py --report

      - name: Run snippet syntax tests
        run: |
          source .venv/bin/activate
          pytest tests/docs/test_generated_snippets.py -v --tb=short

      - name: Run full snippet validation
        run: |
          source .venv/bin/activate
          pytest tests/docs/ -v --cov=scripts --cov-report=term-missing

      - name: Upload snippet extraction report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snippet-report-py${{ matrix.python-version }}
          path: |
            tests/docs/snippets/
            tests/docs/test_generated_snippets.py
          retention-days: 7

  lint-documentation:
    name: Lint Documentation Code Snippets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"

      - name: Extract code snippets
        run: |
          source .venv/bin/activate
          python scripts/extract_doc_snippets.py

      - name: Run ruff on extracted snippets
        run: |
          source .venv/bin/activate
          ruff check tests/docs/snippets/ --ignore D,ARG || true

      - name: Run mypy on extraction script
        run: |
          source .venv/bin/activate
          mypy scripts/extract_doc_snippets.py

  check-documentation-coverage:
    name: Documentation Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[test]"

      - name: Generate documentation coverage report
        run: |
          source .venv/bin/activate
          python scripts/extract_doc_snippets.py --report > doc-coverage.txt
          cat doc-coverage.txt

      - name: Extract snippet statistics
        id: stats
        run: |
          source .venv/bin/activate
          TOTAL=$(python scripts/extract_doc_snippets.py --report 2>&1 | grep "Total snippets" | awk '{print $3}')
          VALID=$(python scripts/extract_doc_snippets.py --report 2>&1 | grep "Valid Python" | awk '{print $4}')
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "valid=$VALID" >> $GITHUB_OUTPUT

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('doc-coverage.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Documentation Code Snippet Coverage\n\n\`\`\`\n${report}\n\`\`\``
            });

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-coverage
          path: doc-coverage.txt
          retention-days: 30

  validate-snippet-quality:
    name: Validate Snippet Quality Standards
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[test,dev]"

      - name: Extract and validate snippets
        run: |
          source .venv/bin/activate
          python scripts/extract_doc_snippets.py

      - name: Check snippet quality
        run: |
          source .venv/bin/activate
          python << 'EOF'
          from pathlib import Path
          from scripts.extract_doc_snippets import SnippetExtractor

          extractor = SnippetExtractor(Path("docs"))
          snippets = extractor.extract_from_directory()

          if not snippets:
              print("No snippets found in documentation")
              exit(0)

          valid_count = sum(1 for s in snippets if s.is_valid_syntax)
          total = len(snippets)
          valid_pct = (valid_count / total) * 100

          print(f"Snippet Quality Report:")
          print(f"  Total: {total}")
          print(f"  Valid: {valid_count} ({valid_pct:.1f}%)")

          # Require at least 90% valid syntax
          if valid_pct < 90:
              print(f"ERROR: Only {valid_pct:.1f}% of snippets have valid syntax")
              print("Expected at least 90%")

              # Show invalid snippets
              invalid = [s for s in snippets if not s.is_valid_syntax]
              print(f"\nInvalid snippets ({len(invalid)}):")
              for s in invalid[:10]:  # Show first 10
                  print(f"  {s.source_file}:{s.line_number}")
                  print(f"    Error: {s.error_message}")

              exit(1)

          print(f"âœ“ Quality check passed: {valid_pct:.1f}% valid syntax")
          EOF
