name: Security and Dependencies

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run security checks weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  UV_VERSION: "0.5.11"

jobs:
  # Security vulnerability scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --frozen --all-extras
          pip install safety bandit

      - name: Run Safety check
        run: |
          # Export dependencies to requirements format for safety
          uv pip freeze > requirements-freeze.txt
          safety check --file requirements-freeze.txt --json > safety-report.json || true
          cat safety-report.json
        continue-on-error: true

      - name: Run Bandit security linter
        run: |
          bandit -r plugins/ mycelium_onboarding/ -f json -o bandit-report.json || true
          bandit -r plugins/ mycelium_onboarding/ -f txt
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Check for outdated dependencies
  outdated-dependencies:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Check for outdated packages
        run: |
          uv pip list --outdated > outdated-packages.txt || true
          cat outdated-packages.txt

      - name: Upload outdated packages report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages
          path: outdated-packages.txt

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --frozen --all-extras
          pip install pip-licenses

      - name: Generate license report
        run: |
          pip-licenses --format=json > licenses.json
          pip-licenses --format=markdown > licenses.md
          cat licenses.md

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.md

  # Code quality analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --frozen --all-extras
          pip install radon

      - name: Cyclomatic Complexity
        run: |
          radon cc plugins/ mycelium_onboarding/ -a -s
        continue-on-error: true

      - name: Maintainability Index
        run: |
          radon mi plugins/ mycelium_onboarding/ -s
        continue-on-error: true

      - name: Raw Metrics
        run: |
          radon raw plugins/ mycelium_onboarding/ -s
        continue-on-error: true

  # Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, license-check, code-quality]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "Security checks completed"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "License check: ${{ needs.license-check.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
