[project]
name = "mycelium-onboarding"
version = "0.1.0"
description = "Mycelium onboarding system with XDG-compliant environment isolation"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Mycelium Team", email = "team@mycelium.dev" }
]
keywords = ["onboarding", "xdg", "environment", "isolation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic>=2.12.1",
    "pyyaml>=6.0.3",
    "click>=8.1.0",
    "packaging>=23.0",
    "inquirerpy>=0.3.4",
    "rich>=14.2.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.1",
    "hypothesis>=6.82.0",
]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["mycelium_onboarding"]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "N",      # pep8-naming
    "D",      # pydocstyle"
]
ignore = [
    "D203",   # one-blank-line-before-class
    "D213",   # multi-line-summary-second-line
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",    # Allow unused args in tests
    "S101",   # Allow asserts in tests
    "D",      # Don't require docstrings in tests
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# Mypy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--import-mode=importlib",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "benchmark: marks tests as benchmarks (deselect with '-m \"not benchmark\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as async tests",
]

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["mycelium_onboarding"]
omit = [
    "*/tests/*",
    "*/__main__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "pytest-asyncio>=1.2.0",
    "types-pyyaml>=6.0.12.20250915",
]
